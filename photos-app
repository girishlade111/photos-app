import { useState, useRef, ChangeEvent } from 'react';
import { Button } from "./components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "./components/ui/card";
import { Input } from "./components/ui/input";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "./components/ui/select";
import { Slider } from "./components/ui/slider";
import { Search, Image, Film, Grid3x3, ListFilter, RotateCw, Crop, Sun, Folder, Upload, Play } from "lucide-react";

type MediaItem = {
  id: string;
  type: 'photo' | 'video' | 'folder';
  title: string;
  date: Date;
  size: string;
  tags: string[];
  src: string;
  path: string[];
  metadata: {
    camera?: string;
    location?: string;
    dimensions?: string;
    duration?: string;
  };
  items?: MediaItem[];
};

export default function PhotosApp() {
  const fileInputRef = useRef<HTMLInputElement>(null);
  const [media, setMedia] = useState<MediaItem[]>([]);
  const [selectedMedia, setSelectedMedia] = useState<MediaItem | null>(null);
  const [currentFolder, setCurrentFolder] = useState<string[]>([]);
  const [searchQuery, setSearchQuery] = useState('');
  const [sortBy, setSortBy] = useState<'date' | 'title'>('date');
  const [filterType, setFilterType] = useState<'all' | 'photo' | 'video' | 'folder'>('all');
  const [editMode, setEditMode] = useState(false);
  const [editValues, setEditValues] = useState({
    brightness: 100,
    contrast: 100,
    saturation: 100,
    rotation: 0,
    crop: { x: 0, y: 0, width: 100, height: 100 }
  });

  const formatFileSize = (bytes: number): string => {
    if (bytes < 1024) return `${bytes} B`;
    if (bytes < 1024 * 1024) return `${(bytes / 1024).toFixed(1)} KB`;
    return `${(bytes / (1024 * 1024)).toFixed(1)} MB`;
  };

  const handleFileSelect = (e: ChangeEvent<HTMLInputElement>) => {
    if (e.target.files && e.target.files.length > 0) {
      const newMedia: MediaItem[] = [];
      
      Array.from(e.target.files).forEach(file => {
        const fileType = file.type.split('/')[0];
        const isImage = fileType === 'image';
        const isVideo = fileType === 'video';
        
        if (isImage || isVideo) {
          const mediaItem: MediaItem = {
            id: `${Date.now()}-${file.name}`,
            type: isImage ? 'photo' : 'video',
            title: file.name,
            date: new Date(file.lastModified),
            size: formatFileSize(file.size),
            tags: [],
            src: URL.createObjectURL(file),
            path: [...currentFolder],
            metadata: {
              camera: '',
              location: '',
              dimensions: isImage ? 'Unknown' : '',
              duration: isVideo ? '0:00' : ''
            }
          };
          newMedia.push(mediaItem);
        }
      });

      setMedia(prev => [...prev, ...newMedia]);
    }
  };

  const createNewFolder = () => {
    const folderName = prompt('Enter folder name:');
    if (folderName) {
      const folderItem: MediaItem = {
        id: `folder-${Date.now()}`,
        type: 'folder',
        title: folderName,
        date: new Date(),
        size: '0 KB',
        tags: [],
        src: '',
        path: [...currentFolder],
        metadata: {},
        items: []
      };
      setMedia(prev => [...prev, folderItem]);
    }
  };

  const navigateToFolder = (folderPath: string[]) => {
    setCurrentFolder(folderPath);
  };

  const filteredMedia = media
    .filter(item => {
      // Filter by current folder path
      const pathMatch = JSON.stringify(item.path) === JSON.stringify(currentFolder);
      
      // Filter by search query
      const matchesSearch = item.title.toLowerCase().includes(searchQuery.toLowerCase()) || 
                         item.tags.some(tag => tag.toLowerCase().includes(searchQuery.toLowerCase()));
      
      // Filter by type
      const matchesType = filterType === 'all' || item.type === filterType;
      
      return pathMatch && matchesSearch && matchesType;
    })
    .sort((a, b) => {
      if (sortBy === 'date') return b.date.getTime() - a.date.getTime();
      return a.title.localeCompare(b.title);
    });

  const handleEditChange = (key: keyof typeof editValues, value: number) => {
    setEditValues(prev => ({ ...prev, [key]: value }));
  };

  const saveEdits = () => {
    if (selectedMedia) {
      setMedia(prev => prev.map(item => 
        item.id === selectedMedia.id ? { ...item, title: `Edited: ${item.title}` } : item
      ));
      setEditMode(false);
    }
  };

  return (
    <div className="min-h-screen bg-background text-foreground">
      <input 
        type="file" 
        ref={fileInputRef} 
        onChange={handleFileSelect}
        multiple
        accept="image/*,video/*"
        className="hidden"
      />
      
      <header className="border-b p-4">
        <div className="container mx-auto flex items-center justify-between">
          <div className="flex items-center gap-2">
            {currentFolder.length > 0 && (
              <Button 
                variant="ghost" 
                size="sm"
                onClick={() => setCurrentFolder(prev => prev.slice(0, -1))}
              >
                ‚Üê Back
              </Button>
            )}
            <h1 className="text-2xl font-bold flex items-center gap-2">
              {currentFolder.length > 0 ? currentFolder[currentFolder.length - 1] : 'Photos App'}
            </h1>
          </div>
          
          <div className="relative w-1/3">
            <Search className="absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground" />
            <Input
              placeholder="Search photos, videos..."
              className="pl-10"
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
            />
          </div>
          
          <div className="flex gap-2">
            <Button variant="ghost" size="icon">
              <Sun className="h-5 w-5" />
            </Button>
          </div>
        </div>
      </header>

      <main className="container mx-auto p-4">
        <div className="flex justify-between items-center mb-4">
          <div className="flex items-center gap-2">
            <Select value={sortBy} onValueChange={(val) => setSortBy(val as 'date' | 'title')}>
              <SelectTrigger className="w-[180px]">
                <SelectValue placeholder="Sort by" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="date">Date (newest first)</SelectItem>
                <SelectItem value="title">Title (A-Z)</SelectItem>
              </SelectContent>
            </Select>
            
            <Select value={filterType} onValueChange={(val) => setFilterType(val as any)}>
              <SelectTrigger className="w-[120px]">
                <SelectValue placeholder="Filter" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="all">All media</SelectItem>
                <SelectItem value="photo">Photos</SelectItem>
                <SelectItem value="video">Videos</SelectItem>
                <SelectItem value="folder">Folders</SelectItem>
              </SelectContent>
            </Select>
          </div>
          
          <div className="flex gap-2">
            <Button 
              variant="outline" 
              onClick={() => fileInputRef.current?.click()}
            >
              <Upload className="h-4 w-4 mr-2" /> Upload
            </Button>
            <Button 
              variant="outline"
              onClick={createNewFolder}
            >
              <Folder className="h-4 w-4 mr-2" /> New Folder
            </Button>
          </div>
        </div>

        {selectedMedia ? (
          <div className="space-y-4">
            <Button variant="outline" onClick={() => setSelectedMedia(null)}>
              Back to gallery
            </Button>

            <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
              <div className="lg:col-span-2 bg-muted rounded-lg overflow-hidden">
                {selectedMedia.type === 'photo' && (
                  <img 
                    src={selectedMedia.src} 
                    alt={selectedMedia.title}
                    className="w-full h-full max-h-[70vh] object-contain"
                    style={{
                      filter: `
                        brightness(${editValues.brightness}%)
                        contrast(${editValues.contrast}%)
                        saturate(${editValues.saturation}%)
                      `,
                      transform: `rotate(${editValues.rotation}deg)`
                    }}
                  />
                )}
                
                {selectedMedia.type === 'video' && (
                  <video 
                    src={selectedMedia.src}
                    controls
                    className="w-full h-full max-h-[70vh] object-contain"
                  />
                )}
                
                {selectedMedia.type === 'folder' && (
                  <div className="aspect-video flex items-center justify-center">
                    <Folder className="h-16 w-16 text-gray-400" />
                  </div>
                )}
              </div>

              <div className="space-y-4">
                <Card>
                  <CardHeader>
                    <CardTitle className="text-lg">Details</CardTitle>
                  </CardHeader>
                  <CardContent className="space-y-2">
                    <div>
                      <p className="text-sm text-muted-foreground">Title</p>
                      <p className="font-medium">{selectedMedia.title}</p>
                    </div>
                    <div>
                      <p className="text-sm text-muted-foreground">Date</p>
                      <p className="font-medium">{selectedMedia.date.toLocaleDateString()}</p>
                    </div>
                    <div>
                      <p className="text-sm text-muted-foreground">Size</p>
                      <p className="font-medium">{selectedMedia.size}</p>
                    </div>
                    {selectedMedia.metadata?.camera && (
                      <div>
                        <p className="text-sm text-muted-foreground">Camera</p>
                        <p className="font-medium">{selectedMedia.metadata.camera}</p>
                      </div>
                    )}
                    {selectedMedia.metadata?.location && (
                      <div>
                        <p className="text-sm text-muted-foreground">Location</p>
                        <p className="font-medium">{selectedMedia.metadata.location}</p>
                      </div>
                    )}
                    {selectedMedia.metadata?.dimensions && (
                      <div>
                        <p className="text-sm text-muted-foreground">Dimensions</p>
                        <p className="font-medium">{selectedMedia.metadata.dimensions}</p>
                      </div>
                    )}
                    {selectedMedia.metadata?.duration && (
                      <div>
                        <p className="text-sm text-muted-foreground">Duration</p>
                        <p className="font-medium">{selectedMedia.metadata.duration}</p>
                      </div>
                    )}
                  </CardContent>
                </Card>

                {editMode ? (
                  <Card>
                    <CardHeader>
                      <CardTitle className="text-lg">Edit</CardTitle>
                    </CardHeader>
                    <CardContent className="space-y-4">
                      <div>
                        <div className="flex justify-between mb-1">
                          <span className="text-sm">Brightness</span>
                          <span className="text-sm">{editValues.brightness}%</span>
                        </div>
                        <Slider
                          value={[editValues.brightness]}
                          onValueChange={(val) => handleEditChange('brightness', val[0])}
                          min={0}
                          max={200}
                          step={1}
                        />
                      </div>
                      <div>
                        <div className="flex justify-between mb-1">
                          <span className="text-sm">Contrast</span>
                          <span className="text-sm">{editValues.contrast}%</span>
                        </div>
                        <Slider
                          value={[editValues.contrast]}
                          onValueChange={(val) => handleEditChange('contrast', val[0])}
                          min={0}
                          max={200}
                          step={1}
                        />
                      </div>
                      <div>
                        <div className="flex justify-between mb-1">
                          <span className="text-sm">Saturation</span>
                          <span className="text-sm">{editValues.saturation}%</span>
                        </div>
                        <Slider
                          value={[editValues.saturation]}
                          onValueChange={(val) => handleEditChange('saturation', val[0])}
                          min={0}
                          max={200}
                          step={1}
                        />
                      </div>
                      <div className="flex gap-2 pt-2">
                        <Button variant="outline" onClick={() => setEditMode(false)}>
                          Cancel
                        </Button>
                        <Button onClick={saveEdits}>Save</Button>
                      </div>
                    </CardContent>
                  </Card>
                ) : (
                  selectedMedia.type !== 'folder' && (
                    <div className="flex gap-2">
                      <Button onClick={() => setEditMode(true)} className="flex-1">
                        <Crop className="h-4 w-4 mr-2" /> Edit
                      </Button>
                      <Button 
                        variant="outline" 
                        className="flex-1"
                        onClick={() => handleEditChange('rotation', editValues.rotation + 90)}
                      >
                        <RotateCw className="h-4 w-4 mr-2" /> Rotate
                      </Button>
                    </div>
                  )
                )}
              </div>
            </div>
          </div>
        ) : (
          <div className="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-5 gap-4">
            {filteredMedia.map(item => (
              <div 
                key={item.id} 
                className="relative group cursor-pointer"
                onClick={() => {
                  if (item.type === 'folder') {
                    navigateToFolder([...item.path, item.title]);
                  } else {
                    setSelectedMedia(item);
                  }
                }}
              >
                <div className="aspect-square bg-muted rounded-lg overflow-hidden">
                  {item.type === 'photo' && (
                    <img
                      src={item.src}
                      alt={item.title}
                      className="w-full h-full object-cover"
                    />
                  )}
                  {item.type === 'video' && (
                    <div className="w-full h-full flex items-center justify-center relative">
                      <video 
                        src={item.src}
                        className="absolute inset-0 w-full h-full object-cover opacity-50"
                      />
                      <Play className="h-8 w-8 text-white" />
                    </div>
                  )}
                  {item.type === 'folder' && (
                    <div className="w-full h-full flex flex-col items-center justify-center">
                      <Folder className="h-12 w-12 text-gray-400" />
                      <span className="mt-2 text-sm">{item.title}</span>
                    </div>
                  )}
                </div>
                <div className="absolute inset-0 bg-black bg-opacity-0 group-hover:bg-opacity-20 transition-all rounded-lg" />
                <div className="mt-2">
                  <p className="text-sm font-medium truncate">{item.title}</p>
                  <p className="text-xs text-muted-foreground">
                    {item.date.toLocaleDateString()} ¬∑ {item.size}
                  </p>
                </div>
                {item.type === 'video' && (
                  <div className="absolute top-2 right-2 bg-black bg-opacity-70 text-white text-xs px-1.5 py-0.5 rounded">
                    VIDEO
                  </div>
                )}
                {item.type === 'folder' && (
                  <div className="absolute top-2 right-2 bg-black bg-opacity-70 text-white text-xs px-1.5 py-0.5 rounded">
                    FOLDER
                  </div>
                )}
              </div>
            ))}
          </div>
        )}
      </main>
    </div>
  );
}
